


object  - concepts
---------------------
    -> abstraction
    -> encapsulation
    -> inheritance
    -> polymorphism

 -----------------------------------

 how to apply these concepts ( abstraction & encapsulation ) incode?

 -> access modifiers
    -> public
    -> private
    -> protected
    -> default (package-private)
 -> acessor methods
    -> getters
    -> setters
 -> interface & abstract class


-----------------------------------
access modifiers
-----------------------------------


my_project
|
| - package1
|    |- A
|    |- B extends A
|    |- C
| - package2
|    |- D extends A
|    |- E


            ---------------------------------------------------------------------------
            same-package                         |     other-package
            ---------------------------------------------------------------------------
            same-type   |  sub-type | other-type |     sub-type | other-type
            ---------------------------------------------------------------------------
 private        Y       |     N     |      N     |     N        |      N
                Y       |     Y     |      Y     |     N        |      N
 protected      Y       |     Y     |      Y     |     Y        |      N
 public         Y       |     Y     |      Y     |     Y        |      Y




---------------------------------------------------------------------------
acessor methods
---------------------------------------------------------------------------

 - getters
    -> public methods that return the value of a private field
    -> used to access private fields from outside the class

 -  setters
    -> public methods that set the value of a private field
    -> used to modify private fields from outside the class

    Note : Use 'lombok' library to avoid boilerplate code for getters and setters

 ---------------------------------------------------------------------------
interface
---------------------------------------------------------------------------

e.g DriveApp

    - MRFWheel
       - rotate()
    - Car
       - move()

 ---------------------------------------------------------------------------