


object  - concepts
---------------------
    -> abstraction
    -> encapsulation
    -> polymorphism
    -> inheritance


 -----------------------------------

 how to apply these concepts ( abstraction & encapsulation ) incode?

 -> access modifiers
    -> public
    -> private
    -> protected
    -> default (package-private)
 -> acessor methods
    -> getters
    -> setters
 -> interface & abstract class


-----------------------------------
access modifiers
-----------------------------------


my_project
|
| - package1
|    |- A
|    |- B extends A
|    |- C
| - package2
|    |- D extends A
|    |- E


            ---------------------------------------------------------------------------
            same-package                         |     other-package
            ---------------------------------------------------------------------------
            same-type   |  sub-type | other-type |     sub-type | other-type
            ---------------------------------------------------------------------------
 private        Y       |     N     |      N     |     N        |      N
                Y       |     Y     |      Y     |     N        |      N
 protected      Y       |     Y     |      Y     |     Y        |      N
 public         Y       |     Y     |      Y     |     Y        |      Y




---------------------------------------------------------------------------
acessor methods
---------------------------------------------------------------------------

 - getters
    -> public methods that return the value of a private field
    -> used to access private fields from outside the class

 -  setters
    -> public methods that set the value of a private field
    -> used to modify private fields from outside the class

    Note : Use 'lombok' library to avoid boilerplate code for getters and setters

---------------------------------------------------------------------------
interface
---------------------------------------------------------------------------

why we use interfaces?
    -> to define a contract that classes must adhere to
    -> to achieve abstraction and polymorphism



 ---------------------------------------------------------------------------
 Inheritance
---------------------------------------------------------------------------

why we need?

-> re-use common variables and methods,
   from generalized class to specialized class

---------------------------------------------------------------------------
Interface vs Abstract Class
---------------------------------------------------------------------------


similarities

   - for both types , we cant create an instance


 syntax differences

    - interface  : no constructor,
    - interface  : constant variables (public static final)
    - interface  : can have only abstract methods (public abstract)  ( till java-7 )
    - interface  : can have default methods (from java-8)

    - abstract class : can have constructor
    - abstract class : can have non-final variables (public, protected, private)
    - abstract class : can have both abstract and non-abstract methods (till java-7)



---------------------------------------------------------------------------
recommended object design
---------------------------------------------------------------------------

top|design|api-level-coding :  Interface  (  Abstraction )
middle|implementation-level-coding : Abstract Class  ( Partial Abstraction ) - Optional
bottom|implementation|coding :  Concrete class(s) ( Full Implementation )

---------------------------------------------------------------------------

data-structure aka collections

top-level: Interface
    - Collection
        - List -> index based
        - Set  -> no-index, no-duplicates
middle-level: AbstractList
bottom-level:  Concrete class

           - ArrayList
           - LinkedList




